#include <iostream>
#include <vector>
using namespace std;

const int INF = 1e9;

struct Edge {
    int u, v, w;
};

void bellman_ford(int source, int n, const vector<Edge>& edges, vector<int>& dist) {
    dist.assign(n, INF);
    dist[source] = 0;

    // Relax edges n-1 times
    for (int i = 0; i < n - 1; ++i) {
        for (auto& edge : edges) {
            if (dist[edge.u] != INF && dist[edge.u] + edge.w < dist[edge.v]) {
                dist[edge.v] = dist[edge.u] + edge.w;
            }
        }
    }

    // Optional: detect negative cycle
    for (auto& edge : edges) {
        if (dist[edge.u] != INF && dist[edge.u] + edge.w < dist[edge.v]) {
            cout << "Negative weight cycle detected!" << endl;
            return;
        }
    }
}
